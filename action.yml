name: "Enforce License Compliance"
inputs:
  fossa_api_key:
    required: false
runs:
  using: "composite"
  steps:
    - if: github.repository_owner != 'getsentry'
      shell: bash
      run: echo "This action should only run on getsentry repos" && exit 1

    - name: 'Pick a FOSSA API key and install FOSSA cli'
      id: set_key
      shell: bash
      env:
        PREFERRED: ${{ inputs.fossa_api_key }}
      run: |

        # FOSSA has two kinds of API keys (aka tokens), a full-privilege key
        # and a low-privilege "push-only" key. The practical difference is that
        # the full key provides more feedback on `fossa test` failure. We have
        # a full key stored in org-wide GitHub Secrets, but a) we can't access
        # it in an action, only in a workflow (hence the input here) and b) it
        # isn't available even in a workflow when run in a PR from a fork. If
        # for any reason it's missing we fall back to a push-only key attached
        # to a low-privilege account, which is safe (enough) to expose publicly
        # here in this file and gives us at least basic pass/fail.
        #
        # See also: https://docs.fossa.com/docs/api-reference#api-tokens
        FALLBACK="9fc50c40b136c68873ad05aec573cf3e"
        echo "key=${PREFERRED:-$FALLBACK}" >> "$GITHUB_OUTPUT"
        # Install specific version of fossa-cli to guarantee stability of parsing fossa job outputs
        curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/v3.7.5/install-latest.sh | bash

    - name: 'Checkout Code'
      uses: actions/checkout@v2

    - name: 'Run FOSSA Scan'
      id: analyze
      continue-on-error: true
      env:
        FOSSA_API_KEY: ${{ steps.set_key.outputs.key }}
      shell: bash
      run: |
        exec &> >(tee -a "analyze_logs.txt")
        fossa analyze

      # We only want to run license compliance test if FOSSA scan succeeds. This is to unblock CI
      # on FOSSA outages.
    - if: steps.analyze.outcome == 'success'
      name: 'Run FOSSA Test'
      id: test
      continue-on-error: true
      env:
        FOSSA_API_KEY: ${{ steps.set_key.outputs.key }}
      shell: bash
      run: |
        exec &> >(tee -a "test_logs.txt")
        # Set timeout to 10 minutes
        fossa test --timeout 600

    - if: steps.analyze.outcome == 'failure' || steps.test.outcome == 'failure'
      name: 'Send error to Sentry on FOSSA scan failure'
      shell: bash
      env:
        SENTRY_URL: https://self-hosted.getsentry.net/
        SENTRY_ORG: self-hosted
        SENTRY_DSN: https://0bc733fd07014f73a703d97ab5452ae2@self-hosted.getsentry.net/4
      run: |
        if [[ ${{ steps.analyze.outcome }} == 'failure' ]]; then
          curl -sL https://sentry.io/get-cli/ | sh
          # Environment variables will automatically be sent, so we just want some minimal information
          sentry-cli send-event -m "FOSSA scan failure" -t repo:$GITHUB_REPOSITORY -e url:$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID --logfile analyze_logs.txt
          exit 0
        fi
        if grep -q "The scan has revealed issues. Number of issues found:" test_logs.txt; then
          echo
          echo "🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 "
          echo
          echo "Eep! It seems that this PR introduces a license violation. Did you add any libraries? Do they use the GPL or some weird license? Am I a confused bot? If you need a hand, cc: @getsentry/open-source in a comment. 🙏"
          echo
          echo "🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 🛑 "
          exit 1
        fi
        curl -sL https://sentry.io/get-cli/ | sh
        sentry-cli send-event -m "FOSSA test failure" -t repo:$GITHUB_REPOSITORY -e url:$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID --logfile test_logs.txt
